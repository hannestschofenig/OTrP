<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC4648 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4648.xml">
<!ENTITY RFC7159 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7159.xml">
<!ENTITY RFC7515 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7515.xml">
<!ENTITY RFC7516 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7516.xml">
<!ENTITY RFC7517 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7517.xml">
<!ENTITY RFC7518 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7518.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<!-- <?rfc compact="yes" ?> -->
<?rfc subcompact="no" ?>
<rfc category="std" docName="draft-ietf-teep-opentrustprotocol-04.txt" ipr="trust200902"
  submissionType="IETF">
  <front>
    <title abbrev="OTrP">The Open Trust Protocol (OTrP)</title>

    <author fullname="Mingliang Pei" initials="M." surname="Pei">
      <organization>Symantec</organization>
      <address>
        <postal>
          <street>350 Ellis St</street>
          <city>Mountain View</city>
          <region>CA</region>
          <code>94043</code>
          <country>USA</country>
        </postal>
        <email>mingliang_pei@symantec.com</email>
      </address>
    </author>

    <author fullname="Andrew Atyeo" initials="A." surname="Atyeo">
      <organization>Intercede</organization>
      <address>
        <postal>
          <street>St. Mary's Road, Lutterworth</street>
          <city>Leicestershire</city>
          <region>LE17</region>
          <code>4PS</code>
          <country>Great Britain</country>
        </postal>
        <email>andrew.atyeo@intercede.com</email>
      </address>
    </author>

    <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
      <organization>Arm Ltd.</organization>
      <address>
        <postal>
          <street>110 Fulbourn Rd</street>
          <city>Cambridge</city>
          <region>CB1</region>
          <code>9NJ</code>
          <country>Great Britain</country>
        </postal>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>

        <author fullname="David Wheeler" initials="D." surname="Wheeler">
      <organization>Intel</organization>
      <address>
        <postal>
          <street></street>
          <city></city>
          <region></region>
          <code></code>
          <country>US</country>
        </postal>
        <email>david.m.wheeler@intel.com</email>
      </address>
    </author>
       
    <author fullname="David Thaler" initials="D." surname="Thaler">
      <organization>Microsoft</organization>
      <address>
        <postal>
          <street></street>
          <city></city>
          <code></code>
          <country>US</country>
        </postal>
        <email>dthaler@microsoft.com</email>
      </address>
    </author>
    
    <date month="July" year="2019" />
    
    <area>Security</area>
    <workgroup>TEEP</workgroup>
    <keyword>Trusted Execution Environment</keyword>
    <abstract>
      <t>This document specifies the Open Trust Protocol (OTrP) version 2, a
      protocol that provisions and installs, updates, and deletes Trusted Applications 
      in a device with a Trusted Execution Environment (TEE).
      </t>
    </abstract>
  </front>

  <middle>
   <section anchor="introduction" title="Introduction">
      <t>The Trusted Execution Environment (TEE) concept has been designed to
      separate a regular operating system, also referred as a Rich Execution
      Environment (REE), from security-sensitive applications. In an TEE
      ecosystem, different device vendors may use different operating systems in the 
      REE and may use different types of TEEs. When application providers or 
      device administrators use Trusted Application Managers (TAMs) to install, update, 
      and delete Trusted Applications (TAs) on a wide range of devices with potentially 
      different TEEs then an interoperability need arises.</t>
      
      <t>This document specifies version 2 of the Open Trust Protocol (OTrP), a protocol 
      for communicating between an OTrP server (as part of a TAM) and an OTrP client 
      (which is a client-side component running in the REE).
      </t>

      <t>The Trusted Execution Environment Provisioning (TEEP) architecture
      document <xref target="I-D.ietf-teep-architecture"/> has set to provide a design guidance
      for such an interoperable protocol.
      </t>

    </section> <!-- Introduction -->

    <section title="Requirements Language">
      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in
        <xref target="RFC2119"/>.
      </t>
      <t>This specification re-uses the terminology defined in 
      <xref target="I-D.ietf-teep-architecture" />.</t>
      
    </section> <!-- Requirements Language -->


    <section anchor="messages" title="OTrP Message Overview">
      <t>OTrP consists of a couple of messages exchanged between a TAM and an OTrP Agent via an OTrP Broker. 
      The messages are encoded either in JSON or CBOR and designed to provide end-to-end security. 
      OTrP messages are signed and/or encrypted by the endpoints, i.e., TAM and OTrP Agent, but trusted 
      applications may as well be encrypted and signed by the service provider. OTrP not only re-uses 
      JSON and CBOR but also the respective security wrappers, namely JOSE (JWS <xref target="RFC7515"/>
          and JWE <xref target="RFC7516"/>, to be more specific) and COSE <xref target="RFC8152"/>. Furthermore, 
      for attestation the Entity Attestation Token (EAT) and for software updates the SUIT 
      manifest format is re-used.
      </t>

        <t>
          This specification defines six messages. 
</t> 

<t>
          A TAM queries a device's current state with a QueryRequest message. 
          An OTrP Agent will, after authenticating and authorizing the request, report 
          attestation information, list all TAs, and provide information about supported 
          algorithms and extensions in a QueryResponse message. An error message is returned if the request 
          could not be processed. A TAM will process the QueryResponse message and determine 
          whether subsequent message exchanges to install, update, or delete trusted applications 
          shall be initiated. 
          
          <figure>
            <artwork><![CDATA[          
  +------------+           +-------------+
  | TAM        |           |OTrP Agent   |
  +------------+           +-------------+

    QueryRequest ------->

                           QueryResponse

                 <-------     or

                             Error
           ]]></artwork>
          </figure>
</t> 

<t>
With the TrustedAppInstall message a TAM can instruct an OTrP Agent to install a TA. 
The OTrP Agent will process the message, determine whether the TAM is authorized and whether the 
TA has been signed by an authorized SP. In addition to the binary, the TAM may also provide 
personalization data. If the TrustedAppInstall message was processed successfully then a 
Success message is returned to the TAM, an Error message otherwise. 

          <figure>
            <artwork><![CDATA[                    
 +------------+           +-------------+
 | TAM        |           |OTrP Agent   |
 +------------+           +-------------+

   TrustedAppInstall ---->

                            Success

                    <----    or

                            Error
           ]]></artwork>
          </figure>
</t> 

<t>With the TrustedAppDelete message a TAM can instruct an OTrP Agent to delete one or multiple TA(s). 
A Success message is returned when the operation has been completed successfully, and an Error message
otherwise. 

          <figure>
            <artwork><![CDATA[          
 +------------+           +-------------+
 | TAM        |           |OTrP Agent   |
 +------------+           +-------------+

   TrustedAppDelete  ---->

                            Success

                    <----    or

                            Error
           ]]></artwork>
          </figure>
</t>

    </section> <!-- OTrP Message Overview --> 


    <section anchor="detailmsg" title="Detailed Messages Specification">

    <t>For a CBOR-based encoding the following security wrapper is used (described in CDDL format <xref target="I-D.ietf-cbor-cddl"/>). 
    
 <figure>
 <artwork><![CDATA[
Outer_Wrapper = {
    msg-authenc-wrapper         => bstr .cbor
                                   Msg_AuthEnc_Wrapper / nil,
    otrp-message                => (QueryRequest / QueryResponse / TrustedAppInstall / 
                                    TrustedAppDelete / Error / Success ), 
}

msg-authenc-wrapper = 1
otrp-message = 2

Msg_AuthEnc_Wrapper = [ * (COSE_Mac_Tagged / COSE_Sign_Tagged / COSE_Mac0_Tagged / COSE_Sign1_Tagged)]
                       ]]></artwork>
          </figure>
     </t> 

<t>A future version of this specification will also describe the security wrapper for JSON (in CDDL format). 
</t>     

 <t>
 <figure>
 <artwork><![CDATA[ 
suite = int

version = int

data_items = (
   attestation: 1,
   ta: 2, 
   ext: 3
)

QueryRequest = (
     TYPE : int, 
     TOKEN : bstr,
     REQUEST : [+data_items],
     ? CIPHER_SUITE : [+suite],
     ? NONCE : bstr,
     ? VERSION : [+version],
     ? OCSP_DATA : bstr, 
     * $$extensions
)
                       ]]></artwork>
          </figure>
          </t> 
          
          <t>A QueryRequest message is signed by the TAM and has the following fields: 
<list style=hanging"> 

<t hangText="TYPE">TYPE = 1 corresponds to a QueryRequest message sent from the TAM to the OTrP Agent.</t> 

<t hangText="TOKEN">The value in the TOKEN field is used to match requests to responses.</t>

<t hangText="REQUEST">The REQUEST field indicates what information the TAM requests from the OTrP Agent in form of a list of integer values. Each integer value corresponds to an IANA registered information element. This specification defines the initial set of information elements. With 'attestation' (1) the TAM requests the OTrP Agent to return an EAT entity attestation token in the response, with 'ta' (2) the TAM wants to query the OTrP Agent for all installed TAs, and with 'ext' (3) the TAM wants to query the OTrP Agent for supported extensions. Further values may be added in the future via IANA registration. </t> 

<t hangText="CIPHER_SUITE">The CIPHER_SUITE field lists the ciphersuite(s) supported by the TAM.</t>

<t hangText="NONCE"> NONCE is an optional field used for ensuring the refreshness of the Entity Attestation Token (EAT) contained in the response.</t>

<t hangText="VERSION">The VERSION field lists the version(s) supported by the TAM. For this version of the specification this field can be omitted. </t> 

<t hangText="OCSP_DATA">The OCSP_DATA field contains a list of OCSP stapling data respectively for the TAM certificate and each of the CA certificates up to the root certificate.  The TAM provides OCSP data so that the OTrP Agent can validate the status of the TAM certificate chain without making its own external OCSP service call.</t>
</list> 
</t> 

<t>
 <figure>
 <artwork><![CDATA[           
ta_id = (
   Vendor_ID = bstr,
   Class_ID = bstr,
   Device_ID = bstr,
   * $$extensions
)

ext_info = int

QueryResponse = (
     TYPE : int, 
     TOKEN : bstr,
     ? SELECTED_CIPHER_SUITE : suite,
     ? SELECTED_VERSION : version,
     ? EAT : bstr, 
     ? TA_LIST  : [+ta_id],
     ? EXT_LIST : [+ext_info],
     * $$extensions
)
                       ]]></artwork>
          </figure>
</t>
          <t>The QueryResponse message is signed and encrypted by the OTrP Agent and returned to the TAM. It has the following fields:      

          <list style=hanging"> 
          
<t hangText="TYPE">TYPE = 2 corresponds to a QueryResponse message sent from the OTrP Agent to the TAM.</t>

<t hangText="TOKEN">The value in the TOKEN field is used to match requests to responses. The value MUST correspond to the value received with the QueryRequest.</t>

<t hangText="SELECTED_CIPHER_SUITE">The SELECTED_CIPHER_SUITE field indicates the selected ciphersuite.</t>

<t hangText="SELECTED_VERSION">The SELECTED_VERSION field indicates the OTrP protocol version selected by the OTrP Agent.</t>

<t hangText="EAT">The EAT field contains an Entity Attestation Token following the encoding defined in <xref target="I-D.ietf-rats-eat"/>.</t>

<t hangText="TA_LIST">The TA_LIST field enumerates the trusted applications installed on the device in form of ta_ids, i.e., a vendor id/class id/device id triple. </t>

<t hangText="EXT_LIST">The EXT_LIST field lists the supported extensions. This document does not define any extensions.</t>
</list> 
</t> 

<t>
 <figure>
 <artwork><![CDATA[   
TrustedAppInstall = (
     TYPE : int, 
     TOKEN : bstr,
     ? TA  : [+SUIT_Outer_Wrapper],
     * $$extensions
)
                       ]]></artwork>
          </figure>
          </t>
          
<t>The TrustedAppInstall message is MACed and encrypted by the TAM and has the following fields:      

          <list style=hanging"> 
          
<t hangText="TYPE">TYPE = 3 corresponds to a TrustedAppInstall message sent from the TAM to the OTrP Agent. In case of successful processing, an Success 
message is returned by the OTrP Agent. In case of an error, an Error message is returned. Note that the TrustedAppInstall message
is used for initial TA installation but also for TA updates. </t> 

<t hangText="TOKEN">The value in the TOKEN field is used to match requests to responses.</t>

<t hangText="TA">The TA field is used to convey one or multiple SUIT manifests. The SUIT manifest contains the code for the trusted app but 
may also convey personalization data. TA binaries and personalization data is often signed and encrypted by the SP. Other combinations are, however, possible as well. For example, it is also possible for the TAM to sign and encrypt the personalization data and to let the SP sign and/or encrypt the TA binary.</t> 

</list> 
</t> 

<t>
 <figure>
 <artwork><![CDATA[ 
TrustedAppDelete  = (
     TYPE : int, 
     TOKEN : bstr,
     ? TA_LIST  : [+ta_id],
     * $$extensions
)
                       ]]></artwork>
          </figure>
          </t>
          
<t>The TrustedAppDelete message is MACed and encrypted by the TAM and has the following fields:      

          <list style=hanging"> 
          
<t hangText="TYPE">TYPE = 4 corresponds to a TrustedAppDelete message sent from the TAM to the OTrP Agent. In case of successful processing, an Success 
message is returned by the OTrP Agent. In case of an error, an Error message is returned.</t> 


<t hangText="TOKEN">The value in the TOKEN field is used to match requests to responses.</t>

<t hangText="TA_LIST">The TA_LIST field enumerates the TAs to be deleted.</t>

</list>
</t> 

<t>
 <figure>
 <artwork><![CDATA[ 
Success = (
     TYPE : int,
     TOKEN : bstr,
     ? MSG : tstr,
     * $$extensions
)
                       ]]></artwork>
          </figure>
          </t>
          
<t>The Success message is MACed and encrypted by the OTrP Agent and has the following fields:      

          <list style=hanging"> 
          
<t hangText="TYPE">TYPE = 5 corresponds to a Error message sent from the OTrP Agent to the TAM.</t> 

<t hangText="TOKEN">The value in the TOKEN field is used to match requests to responses.</t>

<t hangText="MSG">The MSG field contains optional diagnostics information encoded in UTF-8 <xref target="RFC3629"/> returned by the OTrP Agent.


<t>
 <figure>
 <artwork><![CDATA[ 
Error = (
     TYPE : int,
     TOKEN : bstr,
     ERR_CODE : int,
     ? ERR_MSG : tstr,
     ? CIPHER_SUITE : [+suite],
     ? VERSION : [+version],
     * $$extensions
)
                       ]]></artwork>
          </figure>
          </t>
          
                  
<t>If possible, the Error message is MACed and encrypted by the OTrP Agent. Unprotected Error messages MUST be handled with care by the TAM due to possible downgrading attacks. It has the following fields:      

          <list style=hanging"> 
          
<t hangText="TYPE">TYPE = 6 corresponds to a Error message sent from the OTrP Agent to the TAM.</t> 

<t hangText="TOKEN">The value in the TOKEN field is used to match requests to responses.</t>

<t hangText="ERR_CODE">The ERR_CODE field is populated with values listed in a registry (with the initial set of error codes listed below). Only selected messages are applicable to each message. </t>

<t hangText="ERR_MSG">The ERR_MSG message is a human-readable diagnostic message that MUST be encoded using UTF-8 <xref target="RFC3629"/> using Net-Unicode form <xref target="RFC5198"/>.</t>

<t hangText="VERSION">The VERSION field enumerates the protocol version(s) supported by the OTrP Agent. This field is optional but MUST be returned with the ERR_UNSUPPORTED_MSG_VERSION error message.</t>

<t hangText="CIPHER_SUITE">The CIPHER_SUITE field lists the ciphersuite(s) supported by the OTrP Agent. This field is optional but MUST be returned with the ERR_UNSUPPORTED_CRYPTO_ALG error message.</t>
</list>
</t>

<t>This specification defines the following initial error messages. Additional error code can be registered with IANA. 

<t>
<list style="hanging"> 

<t hangText="ERR_ILLEGAL_PARAMETER">  The OTrP Agent sends this error message when 
     a request contains incorrect fields or fields that are inconsistent with other fields.</t>

<t hangText="ERR_UNSUPPORTED_EXTENSION"> The OTrP Agent sends this error message when 
     it recognizes an unsupported extension or unsupported message. </t>

<t hangText="ERR_REQUEST_SIGNATURE_FAILED"> The OTrP Agent sends this error message when 
     it fails to verify the signature of the message.</t>

<t hangText="ERR_UNSUPPORTED_MSG_VERSION">  The OTrP Agent receives a message but does not 
     support the indicated version. </t>

<t hangText="ERR_UNSUPPORTED_CRYPTO_ALG">  The OTrP Agent receives a request message
     encoded with an unsupported cryptographic algorithm.</t>

<t hangText="ERR_BAD_CERTIFICATE">  The OTrP Agent returns this error 
     when processing of a certificate failed. For diagnosis purposes it is 
     RECOMMMENDED to include information about the failing certificate 
     in the error message.</t>

<t hangText="ERR_UNSUPPORTED_CERTIFICATE"> The OTrP Agent returns this error 
     when a certificate was of an unsupported type.</t>

<t hangText="ERR_CERTIFICATE_REVOKED">  The OTrP Agent returns this error 
     when a certificate was revoked by its signer.</t>

<t hangText="ERR_CERTIFICATE_EXPIRED">  The OTrP Agent returns this error 
     when a certificate has expired or is not currently
    valid.</t>

<t hangText="ERR_INTERNAL_ERROR">  The OTrP Agent returns this error when a miscellaneous 
     internal error occurred while processing the request.</t>

<t hangText="ERR_RESOURCE_FULL">  This error is reported when a device
     resource isn't available anymore, such as storage space is full.</t>

<t hangText="ERR_TA_NOT_FOUND">  This error will occur when the target TA does not 
     exist. This error may happen when the TAM has stale information and 
    tries to delete a TA that has already been deleted. </t>

<t hangText="ERR_TA_ALREADY_INSTALLED"> While installing a TA, a TEE will return
     this error if the TA has already been installed.</t>

<t hangText="ERR_TA_UNKNOWN_FORMAT"> The OTrP Agent returns this error when 
     it does not recognize the format of the TA binary. </t>
 
<t hangText="ERR_TA_DECRYPTION_FAILED"> The OTrP Agent returns this error when 
     it fails to decrypt the TA binary. </t>

<t hangText="ERR_TA_DECOMPRESSION_FAILED"> The OTrP Agent returns this error when 
     it fails to decompress the TA binary. </t>

<t hangText="ERR_MANIFEST_PROCESSING_FAILED"> The OTrP Agent returns this error when 
     manifest processing failures occur that are less specific than 
     ERR_TA_UNKNOWN_FORMAT, ERR_TA_UNKNOWN_FORMAT, and ERR_TA_DECOMPRESSION_FAILED.</t>

<t hangText="ERR_PD_PROCESSING_FAILED"> The OTrP Agent returns this error when 
     it fails to process the provided personalization data.</t>
    
</list> 
</t>
    
</section> <!-- Detailed Messages Specification -->


    <section anchor="IANA" title="IANA Considerations">
      <t>There are two IANA requests: a media type and list of error codes.</t>

      <t>IANA is requested to assign a media type for 
          application/otrpv2+json.</t>
        <t>
        <list hangIndent="2" style="hanging">
         <t hangText="Type name:"> application</t>
         <t hangText="Subtype name:"> otrp+json</t>
         <t hangText="Required parameters:"> none</t>
         <t hangText="Optional parameters:"> none</t>
         <t hangText="Encoding considerations:"> Same as encoding considerations of
         application/json as specified in Section 11 of <xref target="RFC7159"/></t>
         <t hangText="Security considerations:"> See Security Considerations Section of this document.</t>
         <t hangText="Interoperability considerations:"> Same as interoperability
         considerations of application/json as specified in
         <xref target="RFC7159"/></t>
         <t hangText="Published specification:"> This document.</t>
         <t hangText="Applications that use this media type:"> OTrPv2 implementations</t>
         <t hangText="Fragment identifier considerations:"> N/A</t>
         <t hangText="Additional information:">
           <list hangIndent="2" style="hanging">
             <t hangText="Deprecated alias names for this type:"> N/A</t>
             <t hangText="Magic number(s):"> N/A</t>
             <t hangText="File extension(s):"> N/A</t>
             <t hangText="Macintosh file type code(s):"> N/A</t>
           </list>
         </t>
         <t hangText="Person to contact for further information:">
            teep@ietf.org</t>
         <t hangText="Intended usage:"> COMMON</t>
         <t hangText="Restrictions on usage:"> none</t>
         <t hangText="Author:"> See the "Authors' Addresses" section of this document</t>
         <t hangText="Change controller:"> IETF</t>
        </list>
        </t>

         <t>IANA is requested to assign a media type for  
          application/otrpv2+cbor.</t>
        <t>
        <list hangIndent="2" style="hanging">
         <t hangText="Type name:"> application</t>
         <t hangText="Subtype name:"> otrpv2+cbor</t>
         <t hangText="Required parameters:"> none</t>
         <t hangText="Optional parameters:"> none</t>
         <t hangText="Encoding considerations:"> Same as encoding considerations of
         application/cbor</t>
         <t hangText="Security considerations:"> See Security Considerations Section of this document. </t>
         <t hangText="Interoperability considerations:"> Same as interoperability
         considerations of application/cbor as specified in
         <xref target="RFC7049"/></t>
         <t hangText="Published specification:"> This document.</t>
         <t hangText="Applications that use this media type:"> OTrPv2 implementations</t>
         <t hangText="Fragment identifier considerations:"> N/A</t>
         <t hangText="Additional information:">
           <list hangIndent="2" style="hanging">
             <t hangText="Deprecated alias names for this type:"> N/A</t>
             <t hangText="Magic number(s):"> N/A</t>
             <t hangText="File extension(s):"> N/A</t>
             <t hangText="Macintosh file type code(s):"> N/A</t>
           </list>
         </t>
         <t hangText="Person to contact for further information:">
            teep@ietf.org</t>
         <t hangText="Intended usage:"> COMMON</t>
         <t hangText="Restrictions on usage:"> none</t>
         <t hangText="Author:"> See the "Authors' Addresses" section of this document</t>
         <t hangText="Change controller:"> IETF</t>
        </list>
        </t>
        
      <t>IANA is also requested to create a new registry for the error codes defined in 
      <xref target="detailmsg"/>. 
      </t>

      
     <t>Registration requests are evaluated using the criteria described in
   the Claim Key instructions in the registration template below after a
   three-week review period on the otrp-reg-review@ietf.org mailing list,
   on the advice of one or more Designated Experts <xref target="RFC8126"/>.  However,
   to allow for the allocation of values prior to publication, the
   Designated Experts may approve registration once they are satisfied
   that such a specification will be published.</t>

   <t>Registration requests sent to the mailing list for review should use
   an appropriate subject (e.g., "Request to register an error code: example").
   Registration requests that are undetermined for a period longer than
   21 days can be brought to the IESG's attention (using the
   iesg@ietf.org mailing list) for resolution.</t>

   <t>Criteria that should be applied by the Designated Experts includes
   determining whether the proposed registration duplicates existing
   functionality, whether it is likely to be of general applicability or
   whether it is useful only for a single extension, and whether the
   registration description is clear. </t>

   <t>IANA must only accept registry updates from the Designated Experts
   and should direct all requests for registration to the review mailing
   list.</t>

    </section> <!-- IANA Considerations -->

    <section anchor="security" title="Security Consideration">
      <section title="Cryptographic Strength">
        <t>The strength of the cryptographic algorithms, using the measure of
           'bits of security' defined in NIST SP800-57 allowed for OTrP
            is:</t>
        <t><list style="symbols">
         <t>At a minimum, 112 bits of security. The limiting factor for this is
            the RSA-2048 algorithm, which is indicated as providing 112 bits
            of symmetric key strength in
            SP800-57. It is important that RSA is supported in order to enhance
            the interoperability of the protocol.</t>
        <t>The option exists to choose algorithms providing 128 bits of
           security. This requires using TEE devices that support ECC P256.
        </t>
        </list>The available algorithms and key sizes specified in this document
          are based on industry standards.
          Over time the recommended or allowed cryptographic algorithms may
          change. It is important that the OTrP allows for crypto-agility.
          In this specification, TAM and TEE can negotiate an agreed upon
          algorithm where both include their supported algorithm in OTrP
          message.
        </t>
      </section>

      <section title="Message Security">
        <t>OTrP messages between the TAM and TEE are protected by message
        security using JWS and JWE. The 'Basic protocol profile' section of
        this document describes the algorithms used for this. All OTrP TEE
        devices and OTrP TAMs must meet the requirements of the basic profile.
        In the future additional 'profiles' can be added.</t>

        <t>PKI is used to ensure that the TEE will only communicate with a
        trusted TAM, and to ensure that the TAM will only communicate with a
        trusted TEE.</t>
      </section>

      <section title="TEE Attestation">
        <t>It is important that the TAM can trust that it is talking to a
        trusted TEE. This is achieved through attestation. The TEE has a private
        key and certificate built into it at manufacture, which is used to sign
        data supplied by the TAM. This allows the TAM to verify that the TEE is
        trusted. </t>

        <t>It is also important that the TFW (trusted firmware) can be checked.
        The TFW has a private key and certificate built into it at manufacture,
        which allows the TEE to check that that the TFW is trusted. </t>

        <t>The GetDeviceState message therefore allows the TAM to check that it
        trusts the TEE, and the TEE at this point will check whether it trusts
        the TFW. </t>
      </section>

      <section title="TA Protection">
        <t>
          A TA will be delivered in an encrypted form. This encryption is an
          additional layer within the message encryption described in the
          <xref target="basicprofile"/> of this document. The TA binary
          is encrypted for each target device with the device's TEE SP AIK
          public key. A TAM can either do this encryption itself or
          provide the TEE SP AIK public key to an SP such that the SP
          encrypts the encrypted TA for distribution to the TEE.
        </t>

        <figure>
          <preamble>The encryption algorithm can use a random AES 256 key
          "taek" with a 16 byte random IV, and the "taek" is encrypted by the
          "TEE SP AIK public key". The following encrypted TA data structure
          is expected by a TEE: </preamble>

          <artwork><![CDATA[
"encrypted_ta_bin": {
  "key": "<JWE enveloped data of a 256-bit symmetric key by
         the recipient's TEEspaik public key>",
  "iv": <hex of 16 random bytes>",
  "alg": "AESCBC",
  "cipherdata": "<BASE64 encoded encrypted TA binary data>"
}
         ]]></artwork>
        </figure>

      </section>

      <section title="TA Personalization Data">
      <t>
        An SP or TAM can supply personalization data for a TA to initialize for
        a device. Such data is passed through an InstallTA command from a TAM.
        The personalization data itself is (or can be) opaque to the TAM.
        The data can be from the SP without being revealed to the TAM.
        The data is sent in an encrypted manner in a
        request to a device such that only the device can decrypt. A device's
        TEE SP AIK public key for an SP is used to encrypt the data. Here JWE
        enveloping is used to carry all encryption key parameters along with
        encrypted data.
      </t>

        <figure>
          <artwork><![CDATA[
"encrypted_ta_data": { // "TA personalization data"
    "key": "<JWE enveloped data of a 256-bit symmetric key by
             the recipient's TEEspaik public key>",
    "iv": "<hex of 16 random bytes>",
    "alg": "AESCBC",
    "cipherdata": "<BASE64 encoded encrypted TA personalization
                   data>"
  }
         ]]></artwork>
        </figure>

      </section>

      <section title="TA Trust Check at TEE">
        <t>
        A TA binary is signed by a TA signer certificate. This TA signing
        certificate/private key belongs to the SP, and may be self-signed (i.e.,
        it need not participate in a trust hierarchy). It is the responsibility
        of the TAM to only allow verified TAs from trusted SPs into the system.
        Delivery of that TA to the TEE is then the responsibility of the TEE,
        using the security mechanisms provided by the OTrP.
        </t>

        <t>
        We allow a way for an (untrusted) application to check the
        trustworthiness of a TA. OTrP Broker has a function to allow
        a Client Application to query the information about a TA.
        </t>

        <t>
          An application in the Rich O/S may perform verification of the TA by
          verifying the signature of the TA. The GetTAInformation
          function is available to return the TEE supplied TA signer and TAM signer
          information to the application. An application can do additional
          trust checks on the certificate returned for this TA. It might trust
          the TAM, or require additional SP signer trust chaining.
        </t>
      </section>

      <section title="One TA Multiple SP Case">
        <t> A TA for multiple SPs must have a different identifier per SP.
          A TA will be installed in a different SD for each respective SP. </t>
      </section>

      <section title="OTrP Broker Trust Model">
        <t> An OTrP Broker could be malware in the vulnerable REE. A
        Client Application will connect its TAM provider for required TA
        installation. It gets command messages from the TAM, and passes
        the message to the OTrP Broker. </t>

        <t> The OTrP is a conduit for enabling the TAM to communicate
        with the device's TEE to manage SDs and TAs. All TAM messages are
        signed and sensitive data is encrypted such that the OTrP Broker cannot
        modify or capture sensitive data. </t>
      </section>

      <section title="OCSP Stapling Data for TAM Signed Messages">
        <t> The GetDeviceStateRequest message from a TAM to a TEE shall include
        OCSP stapling data for the TAM's signer certificate and for
        intermediate CA certificates up to the root certificate so that the TEE
        can verify the signer certificate's revocation status. </t>

        <t> A certificate revocation status check on a TA signer certificate is
        OPTIONAL by a TEE. A TAM is responsible for vetting a TA and the SP
        before it distributes them to devices. A TEE will
        trust a TA signer certificate's validation status done by a TAM when it
        trusts the TAM. </t>
      </section>

      <section title="Data Protection at TAM and TEE">
        <t> The TEE implementation provides protection of data on the device.
        It is the responsibility of the TAM to protect data on its servers. </t>
      </section>

      <section title="Privacy Consideration">
        <t> Devices are issued with a unique TEE certificate to attest the
          device's validity. This uniqueness also creates a privacy and
          tracking risk that must be mitigated. </t>

        <t> The TEE will only release the TEE certificate to a trusted TAM (it
        must verify the TAM certificate before proceeding). OTrP
        is designed such that only a TAM can obtain the TEE device
        certificate and firmware certificate - the GetDeviceState message
        requires signature checks to validate the TAM is trusted, and OTrP
        delivers the device's certificate(s) encrypted such that only that TAM
        can decrypt the response. A Client Application will never see the
        device certificate. </t>

        <t> An SP-specific TEE SP AIK  (TEE SP Anonymous Key) is generated by
        the protocol for Client Applications. This provides a way for the
        Client Application to validate some data that the TEE may send
        without requiring
        the TEE device certificate to be released to the client device rich O/S
        , and to optionally allow an SP to encrypt a TA for a target device
        without the SP needing to be supplied with the TEE device certificate. </t>
      </section>

      <section title="Threat Mitigation">
        <t> A rogue application may perform excessive TA loading. An OTrP Broker
        implementation should protect against excessive calls. </t>

        <t> Rogue applications might request excessive SD creation. The
        TAM is responsible to ensure this is properly guarded against. </t>

        <t> Rogue OTrP Broker could replay or send TAM messages out of
        sequence: e.g., a TAM sends update1 and update2. The OTrP Broker
        replays update2 and update1 again, creating an unexpected result that
        a client wants. "dsihash" is used to mitigate this. The TEE MUST
        store DSI state and check that the DSI state matches before it
        does another update.
        </t>

        <t> Concurrent calls from a TAM to a TEE MUST be handled properly by a
        TEE. If multiple concurrent TAM operations take place, these could
        fail due to the "dsihash" being modified by another concurrent operation.
        The TEE is responsible for resolve any locking such that one
        application cannot lock other applications from using the TEE, except
        for a short term duration of the TAM operation taking place. For
        example, an OTrP operation that starts but never completes (e.g. loss
        of connectivity) must not prevent subsequent OTrP messages from being
        executed. </t>
      </section>

      <section title="Compromised CA">
        <t> A root CA for TAM certificates might get compromised. Some TEE
        trust anchor update mechanism is expected from device OEMs. A compromised
        intermediate CA is covered by OCSP stapling and OCSP validation check
        in the protocol. A TEE should validate certificate revocation about a
        TAM certificate chain. </t>

        <t> If the root CA of some TEE device certificates is compromised,
        these devices might be rejected by a TAM, which is a decision of the
        TAM implementation and policy choice. Any intermediate CA for TEE device
        certificates SHOULD be validated by TAM with a Certificate
        Revocation List (CRL) or Online Certificate Status Protocol (OCSP)
        method.
        </t>
      </section>

      <section title="Compromised TAM">
        <t> The TEE SHOULD use validation of the supplied TAM certificates and
        OCSP stapled data to validate that the TAM is trustworthy. </t>

        <t> Since PKI is used, the integrity of the clock within the TEE
        determines the ability of the TEE to reject an expired TAM certificate,
        or revoked TAM certificate. Since OCSP stapling includes signature
        generation time, certificate validity dates are compared to the current
        time.</t>
      </section>

      <section title="Certificate Renewal">
        <t> TFW and TEE device certificates are expected to be long lived,
          longer than the
        lifetime of a device. A TAM certificate usually has a moderate
        lifetime of 2 to 5 years. A TAM should get renewed or rekeyed
        certificates. The root CA certificates for a TAM, which are embedded
        into the trust anchor store in
        a device, should have long lifetimes that don't require device trust
        anchor update. On the other hand, it is imperative that OEMs or device
        providers plan for support of trust anchor update in their shipped
        devices. </t>
      </section>

    </section> <!-- Security Consideration -->

  

  </middle>

  <back>
    <references title="Normative References">
     &RFC2119;
     &RFC4648;
     &RFC7159;
     &RFC7515;
     &RFC7516;
     &RFC7517;
     &RFC7518;
     &RFC8152;
     &RFC3629;
     &RFC5198;
     &RFC7049;
     &RFC8126;
     &I-D.ietf-rats-eat; 
    </references> <!-- Normative References --> 

    <references title="Informative References">

      &I-D.ietf-teep-architecture;
      &I-D.ietf-cbor-cddl; 
  
    </references> <!-- Informative References --> 

  <section anchor="Acknowledgements" title="Acknowledgements">
      <t>We thank Alin Mutu for his contribution to many discussion that helped
      to design the trust flow mechanisms, and the creation of the flow diagrams.
      We also thank the following people (in alphabetical order) for their input
      and review: Sangsu Baek, Rob Coombs, Dapeng Liu, and
      Pengfei Zhao.
      </t>
    </section> <!-- Acknowledgements --> 

   <section anchor="Contributors" title="Contributors">
    
    <t>We would like to thank the following individuals for their contributions to an earlier version
    of this specification.</t> 
    
        <figure>
          <artwork><![CDATA[
- Brian Witten
  Symantec
  brian_witten@symantec.com

- Tyler Kim
  Solacia
  tylerkim@iotrust.kr

- Nick Cook
  Arm Ltd.
  nicholas.cook@arm.com
  
- Minho Yoo  
  IoTrust
  minho.yoo@iotrust.kr
         ]]></artwork>
        </figure>
    </section> <!-- Contributors --> 
    
  </back>
</rfc>
